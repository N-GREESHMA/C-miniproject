#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_VOTERS 100
#define MAX_CANDIDATES 3

// Structure for storing voter details
typedef struct {
    int voterID;
    int hasVoted;
} Voter;

// Structure for candidates
typedef struct {
    char name[50];
    int votes;
} Candidate;

Voter voters[MAX_VOTERS];  // Array to store voter details
Candidate candidates[MAX_CANDIDATES] = {
    {"Candidate A", 0},
    {"Candidate B", 0},
    {"Candidate C", 0}
};

int totalVoters = 0;  // Keeps track of registered voters

// Function to register a voter
void registerVoter(int voterID) {
    if (totalVoters >= MAX_VOTERS) {
        printf("Voter registration full!\n");
        return;
    }
    voters[totalVoters].voterID = voterID;
    voters[totalVoters].hasVoted = 0;
    totalVoters++;
    printf("Voter ID %d registered successfully.\n", voterID);
}

// Function to check if a voter has already voted
int hasVoterVoted(int voterID) {
    for (int i = 0; i < totalVoters; i++) {
        if (voters[i].voterID == voterID) {
            return voters[i].hasVoted;
        }
    }
    return -1; // Voter ID not found
}

// Function to cast a vote
void castVote(int voterID) {
    int voterIndex = -1;
    
    // Find voter in the system
    for (int i = 0; i < totalVoters; i++) {
        if (voters[i].voterID == voterID) {
            voterIndex = i;
            break;
        }
    }

    if (voterIndex == -1) {
        printf("Invalid Voter ID! Please register first.\n");
        return;
    }

    if (voters[voterIndex].hasVoted) {
        printf("You have already voted!\n");
        return;
    }

    printf("\nCandidates:\n");
    for (int i = 0; i < MAX_CANDIDATES; i++) {
        printf("%d. %s\n", i + 1, candidates[i].name);
    }

    int choice;
    printf("Enter the candidate number you want to vote for: ");
    scanf("%d", &choice);

    if (choice < 1 || choice > MAX_CANDIDATES) {
        printf("Invalid choice! Vote not recorded.\n");
        return;
    }

    // Increment vote count for chosen candidate
    candidates[choice - 1].votes++;
    voters[voterIndex].hasVoted = 1;
    printf("Vote cast successfully for %s!\n", candidates[choice - 1].name);
}

// Function to display voting results
void displayResults() {
    printf("\n--- Voting Results ---\n");
    for (int i = 0; i < MAX_CANDIDATES; i++) {
        printf("%s: %d votes\n", candidates[i].name, candidates[i].votes);
    }
}

// Main menu function
void mainMenu() {
    int choice, voterID;

    while (1) {
        printf("\n--- Online Voting System ---\n");
        printf("1. Register Voter\n");
        printf("2. Cast Vote\n");
        printf("3. Display Results\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter your Voter ID: ");
                scanf("%d", &voterID);
                registerVoter(voterID);
                break;
            case 2:
                printf("Enter your Voter ID: ");
                scanf("%d", &voterID);
                castVote(voterID);
                break;
            case 3:
                displayResults();
                break;
            case 4:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
}

// Main function
int main() {
    mainMenu();
    return 0;
}
